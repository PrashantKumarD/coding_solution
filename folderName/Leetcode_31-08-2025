class Solution {
    public void solveSudoku(char[][] board) {
        solvefnc(board);
    }
    private boolean solvefnc(char[][] board){
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(board[i][j]=='.'){
                    for(char z='1';z<='9';z++){
                        if(check(i,j,(int)(z-'0'),board)){
                            board[i][j]=z;

                            if(solvefnc(board)){
                                return true;
                            }

                            board[i][j] = '.';
                        }
                    }
                    return false;
                }

            }
        }
        return true;
    }
    private boolean check(int row,int col,int val,char[][] board){
        for(int i=0;i<9;i++){
            int a = board[row][i]-'0';
            if(a==val) return false;
        }
        for(int j=0;j<9;j++){
            int a = board[j][col]-'0';
            if(a==val) return false;
        }
        int nrow = row/3; int ncol = col/3;
        for(int i=nrow*3;i<nrow*3+3;i++){
            for(int j=ncol*3;j<ncol*3+3;j++){
                int a = board[i][j]-'0';
                if(a==val) return false;
            }
        } 
        return true;

    }
}
