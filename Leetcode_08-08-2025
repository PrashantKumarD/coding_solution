class Solution {
    public double soupServings(int n) {
        if(n > 4800) return 1;
        double[][] dp=new double[n+1][n+1];
        for(int i=0;i<=n;i++) Arrays.fill(dp[i],-1);
        return soupcount(n,n,dp);

    }
    public double soupcount(int a , int b,double[][] dp){
        if(a<=0 && b<=0) return 0.5;
        if(a<=0) return 1;
        if(b<=0) return 0;
        if(dp[a][b]!=-1) return dp[a][b];

        double x = 0.25*soupcount(a-100,b-0,dp);
        double y = 0.25*soupcount(a-75,b-25,dp);
        double z = 0.25*soupcount(a-50,b-50,dp);
        double w = 0.25*soupcount(a-25,b-75,dp);

        return dp[a][b]=x+y+z+w;
    }
}
